using System;
using Sandbox.Common.ObjectBuilders;
using Sandbox.Game;
using Sandbox.Game.Entities;
using Sandbox.ModAPI;
using VRage.Game;
using VRage.Game.Components;
using VRage.Game.ModAPI;
using VRage.Game.VisualScripting;
using VRage.ModAPI;
using VRage.ObjectBuilders;
using VRageMath;

namespace ABPlacementRestrict
{
    [MyEntityComponentDescriptor(typeof(MyObjectBuilder_CubeBlock), false, "SRB")]
    public class SRBDetector : MyGameLogicComponent
    {
        private IMyCubeBlock cubeBlock;
        private int updateCounter = 0;
        private const int UPDATE_INTERVAL = 60; // Check once per second

        public override void Init(MyObjectBuilder_EntityBase objectBuilder)
        {
            NeedsUpdate = MyEntityUpdateEnum.BEFORE_NEXT_FRAME;
        }

        public override void UpdateOnceBeforeFrame()
        {
            cubeBlock = (IMyCubeBlock)Entity;
            NeedsUpdate = MyEntityUpdateEnum.EACH_10TH_FRAME;
        }

        public override void UpdateBeforeSimulation10()
        {
            updateCounter++;

            if (updateCounter < UPDATE_INTERVAL)
            {
                return;
            }

            updateCounter = 0;

            if (cubeBlock.BlockDefinition.SubtypeId == "SC_SRB")
            {
                // Check for a Thruster block in any of the 26 adjacent positions
                Vector3I blockPosition = cubeBlock.Position;
                for (int i = -1; i <= 1; i++)
                {
                    for (int j = -1; j <= 1; j++)
                    {
                        for (int k = -1; k <= 1; k++)
                        {
                            Vector3I adjacentPosition = blockPosition + new Vector3I(i, j, k);
                            IMySlimBlock adjacentBlock = cubeBlock.CubeGrid.GetCubeBlock(adjacentPosition);

                            if (adjacentBlock != null && adjacentBlock.FatBlock is IMyThrust)
                            {
                                return; // Placement condition met, exit the method
                            }
                        }
                    }
                }

                // Placement condition not met, disallow placement
                cubeBlock.CubeGrid.RazeBlock(cubeBlock.Position);
            }
        }
    }
}
